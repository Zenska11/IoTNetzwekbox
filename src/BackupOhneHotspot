#include <Arduino.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>
#include <DHT.h>
#include "time.h"
#include <ESP32Ping.h>


#define REDLEDPIN 14
#define GREENLEDPIN 26
#define DHTPIN 16
#define DHTTYPE DHT11


const char* ssid = "UPC6B45567_Ext";
const char* password =  "Sunwaja4deur";
const char* MQTT_BROKER = "io.adafruit.com";

// f√ºr die Ports
const uint16_t port8005 = 8090;
const uint16_t port8006 = 8091;
const char * host = "192.168.0.199";


const char* ntpServer = "pool.ntp.org";
const long  gmtOffset_sec = 3600;
const int   daylightOffset_sec = 3600;


WiFiClient espClient;
PubSubClient client(espClient);

DHT dht(DHTPIN, DHTTYPE);




char tempStr[4];
char humidStr[4];
char timeStr[32];
char * pingStr = "";
char * dnsStr = "";
char * Strport8005 = "";
char * Strport8006 = "";





void setup() {

  Serial.begin(9600);
  WiFi.begin(ssid, password);
 
  while (WiFi.status() != WL_CONNECTED) {
    Serial.println("");
    Serial.print("try connecting..");
    delay(1000);
    Serial.print(".");
  }
  Serial.println("WLAN CONNECTED");
  Serial.println("");


  pinMode(DHTPIN, INPUT);
  pinMode(REDLEDPIN, OUTPUT);
  pinMode(GREENLEDPIN, OUTPUT);

  
  dht.begin();
  Serial.println("TEST 123 TEST");
  
  client.setServer(MQTT_BROKER, 1883);


  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer);
  
}



void reconnect() {
    while (!client.connected()) {
        digitalWrite(REDLEDPIN, HIGH);
        Serial.print("Reconnecting...");
        if (!client.connect("ZenskaClient", "pfropfen", "aio_tTKa28192auPVs3hb3ioIL7kpSf9")) {
            Serial.print("failed, rc=");
            Serial.print(client.state());
            Serial.println(" retrying in 5 seconds");
            delay(5000);
        }
    }
    Serial.println("");
    digitalWrite(REDLEDPIN, LOW);
}

 
 void greenblink(int timems) {
  digitalWrite(GREENLEDPIN, HIGH);
  delay(timems);
  digitalWrite(GREENLEDPIN, LOW);
 }

 void redblink(int timems) {
  digitalWrite(REDLEDPIN, HIGH);
  delay(timems);
  digitalWrite(REDLEDPIN, LOW);
 }


tm getLocalTime()
{
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    
    Serial.print("Time not available"); 
    redblink(500);  
  }

  
  Serial.print(&timeinfo,"%A, %B %d %Y %H:%M:%S");
  greenblink(500);
  
  return timeinfo;

}




 
void loop() {
  
  float humid = dht.readHumidity();
  float temp = dht.readTemperature();


  digitalWrite(REDLEDPIN, LOW);
  digitalWrite(GREENLEDPIN, LOW);


  if (!client.connected()) {
        reconnect();
    }
  client.loop();
 



  if (isnan(temp) || isnan(humid)) 
    {
        Serial.println("Failed to read from DHT");
        redblink(500);
    } 
    else 
    {
        Serial.print("Humidity: "); 
        Serial.print(humid);
        Serial.print(" %\t");
        Serial.print("Temperature: "); 
        Serial.print(temp);
        Serial.println(" *C");
        greenblink(500);
        
    }


  

  tm timeinfo = getLocalTime();
  strftime(timeStr, sizeof(timeStr), "%A, %B %d %Y %H:%M:%S", &timeinfo); 
  
  bool successPing = Ping.ping("www.google.com", 3);
  
  if(!successPing){
    Serial.println();
    Serial.println("Ping failed");
    redblink(500);
    pingStr = "nicht erfolgreich";
  }else {
    Serial.println();
    Serial.println("Ping succesful.");
    greenblink(500);
    pingStr = "erfolgreich";
  }

    bool successDNS = Ping.ping("8.8.8.8", 3);
  
  if(!successDNS){
    Serial.println("DNS failed");
    redblink(500);
    dnsStr = "nicht erfolgreich";
  }else {
    Serial.println("DNS succesful.");
    greenblink(500);
    dnsStr = "erreichbar";
  }

  WiFiClient portclient;
 
    if (!portclient.connect(host, port8005)) {
 
        Serial.println("Connection to host at port 8005 failed");
        Strport8005 = "failedMK";
        delay(1000);
    } else {
        Serial.println("Connection to port 8005 success!");
 
        portclient.print("Hello from ESP32!");
        Strport8005 = "success";

        Serial.println("Disconnecting...");
        portclient.stop();
    }
    
    

//2
    if (!portclient.connect(host, port8006)) {
 
        Serial.println("Connection to host at port 8006 failed");
        Strport8006 = "failedMK";

        delay(1000);
    } else {
        Serial.println("Connection to port 8006 success!");
  
        portclient.print("Hello from ESP32!");
        Strport8006 = "success";
        Serial.println("Disconnecting...");
        portclient.stop();
    }
    
 
    
 

  itoa(temp, tempStr, 10);
  itoa(humid, humidStr, 10);
  
  

  
  client.publish("pfropfen/feeds/temp", tempStr);
  client.publish("pfropfen/feeds/wet", humidStr);
  client.publish("pfropfen/feeds/time", timeStr);
  client.publish("pfropfen/feeds/ping", pingStr); 
  client.publish("pfropfen/feeds/dns", dnsStr);
  client.publish("pfropfen/feeds/port8005", Strport8005);
  client.publish("pfropfen/feeds/port8006", Strport8006);

  Serial.println("");

  greenblink(3000);
  delay(7000);
  
  
}

